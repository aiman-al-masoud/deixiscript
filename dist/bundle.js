/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./app/src/new-frontend/cst-to-ast.ts":
/*!********************************************!*\
  !*** ./app/src/new-frontend/cst-to-ast.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cstModelToAstModel = exports.cstToAst = void 0;
function cstToAst() {
}
exports.cstToAst = cstToAst;
function cstModelToAstModel(cst) {
    const ast = {};
    cst.forEach(x => {
        console.log(x);
    });
    return ast;
}
exports.cstModelToAstModel = cstModelToAstModel;


/***/ }),

/***/ "./app/src/new-frontend/maybe-cst.ts":
/*!*******************************************!*\
  !*** ./app/src/new-frontend/maybe-cst.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.nounPhrase = void 0;
const SPACE = { or: [' '], excludeFromAst: true, number: '+' };
const START_ANY_ORDER = { startAnyOrder: true, separator: SPACE, number: '*' };
const END_ANY_ORDER = { endAnyOrder: true };
const START_OPTIONAL = { startOptional: true, number: '1|0' };
const END_OPTIONAL = { endOptional: true };
// "CIAO MONDo"
const stringLiteral = [
    { or: ['"'], number: 1, excludeFromAst: true },
    { or: ['any-symbol'], role: 'stringChars', exceptFor: ['"'], number: '*', },
    { or: ['"'], number: 1, excludeFromAst: true },
];
const numberLiteral = [
    { or: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], role: 'numberChars', number: '+' },
];
exports.nounPhrase = [
    { or: ['every', 'any'], role: 'pluralizer', number: '1|0' },
    SPACE,
    { or: ['the', 'old'], role: ' anaphoraOperator', number: '1|0' },
    SPACE,
    { or: ['a', 'an', 'new'], role: 'newOperator', number: '1|0' },
    SPACE,
    START_OPTIONAL,
    [
        { or: ['first', 'last'], role: 'limitKeyword', number: 1 },
        SPACE,
        { or: ['number-literal'], role: 'limitNumber', number: '1|0' },
    ],
    END_OPTIONAL,
    SPACE,
    { or: ['noun'], role: 'modifier', separator: SPACE, number: 'all-but-last' },
    SPACE,
    { or: ['noun', 'string', 'number'], role: 'head', number: 1 },
    { or: ['s'], role: 'pluralizer', number: '1|0' },
    SPACE,
    START_OPTIONAL,
    [
        { or: ['of'], excludeFromAst: true },
        SPACE,
        { or: ['noun-phrase'], role: 'owner', number: 1 },
    ],
    END_OPTIONAL,
];
const mulExpression = [
    { or: ['noun-phrase'], role: 'leftOperand', number: 1 },
    SPACE,
    { or: ['*', '/'], role: 'operator', number: 1 },
    SPACE,
    { or: ['noun-phrase'], role: 'rightOperand', number: '1|0' },
];
const sumExpression = [
    { or: ['mul-expression'], role: 'leftOperand', number: 1 },
    SPACE,
    { or: ['+', '-'], role: 'operator', number: 1 },
    SPACE,
    { or: ['mul-expression'], role: 'rightOperand', number: '1|0' },
];
const andExpression = [
    { or: ['sum-expression'], role: 'left-operand', number: 1 },
    SPACE,
    { or: ['and'], number: 1 },
    SPACE,
    { or: ['sum-expression'], role: 'right-operand', number: '1|0' },
];
const expression = [
    { or: ['and-expression'], number: 1 }
];
const DATIVE = [
    { or: ['to'], number: 1, excludeFromAst: true },
    SPACE,
    { or: ['noun-phrase'], role: 'recipient' },
];
const INSTRUMENTAL = [
    { or: ['by'], number: 1, excludeFromAst: true },
    SPACE,
    { or: ['noun-phrase'], role: 'instrument' },
];
const simpleSentence = [
    { or: ['noun-phrase'], role: 'subject', number: '1|0' },
    SPACE,
    { or: ['do', 'does'], number: '1|0', excludeFromAst: true },
    SPACE,
    { or: ['not'], role: 'negation', number: '1|0' },
    SPACE,
    { or: ['verb', 'copula'], role: 'verb-or-copula', number: 1 },
    SPACE,
    { or: ['not'], role: 'negation', number: '1|0' },
    SPACE,
    { or: ['noun-phrase'], role: 'object', number: '1|0' },
    SPACE,
    START_ANY_ORDER,
    [
        DATIVE,
        INSTRUMENTAL,
    ],
    END_ANY_ORDER,
];
const complexSentence1 = [
    { or: ['simple-sentence'], role: 'condition', number: 1 },
    SPACE,
    { or: ['if', 'when'], role: 'subordinating-conjunction', number: 1 },
    SPACE,
    { or: ['simple-sentence'], role: 'consequence', number: 1 },
];
const complexSentence2 = [
    { or: ['if', 'when'], role: 'subordinating-conjunction', number: 1 },
    SPACE,
    { or: ['simple-sentence'], role: 'condition', number: 1 },
    SPACE,
    { or: ['then'], number: 1, excludeFromAst: true },
    SPACE,
    { or: ['simple-sentence'], role: 'consequence', number: 1 },
];
// if every button is red then x = 1
const command = {
    subconj: 'if',
    condition: {
        subject: {
            pluralizer: true,
            head: 'button',
        },
        verb: 'be',
        object: {
            head: 'red'
        }
    },
    consequence: {
        subject: {
            head: 'x',
            isNew: true,
        },
        verb: 'be',
        object: {
            head: 1,
        }
    }
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./app/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const cst_to_ast_1 = __webpack_require__(/*! ./src/new-frontend/cst-to-ast */ "./app/src/new-frontend/cst-to-ast.ts");
const maybe_cst_1 = __webpack_require__(/*! ./src/new-frontend/maybe-cst */ "./app/src/new-frontend/maybe-cst.ts");
// main()
console.log((0, cst_to_ast_1.cstModelToAstModel)(maybe_cst_1.nounPhrase));

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,